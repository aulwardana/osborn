// automatically generated by the FlatBuffers compiler, do not modify

package sensors

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Sensor struct {
	_tab flatbuffers.Table
}

func GetRootAsSensor(buf []byte, offset flatbuffers.UOffsetT) *Sensor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensor{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Sensor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Sensor) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Sensor) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Sensor) Temperature() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Sensor) MutateTemperature(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *Sensor) Humidity() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Sensor) MutateHumidity(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Sensor) Topic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SensorStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SensorAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func SensorAddTemperature(builder *flatbuffers.Builder, temperature float32) {
	builder.PrependFloat32Slot(1, temperature, 0.0)
}
func SensorAddHumidity(builder *flatbuffers.Builder, humidity float32) {
	builder.PrependFloat32Slot(2, humidity, 0.0)
}
func SensorAddTopic(builder *flatbuffers.Builder, topic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(topic), 0)
}
func SensorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
